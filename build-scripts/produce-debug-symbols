#!/bin/sh
#
# Extracts debug symbols from CFEngine binaries and libraries, creating a
# self-extracting installer package. This script:
# - Extracts debug symbols from executables and libraries using objcopy
# - Strips debug information from the original binaries
# - Creates compressed .debug files
# - Generates a self-extracting .bsx package for distribution
#
# > What is the purpose of this?
# You can strip debugging info from production binaries to make them smaller,
# while keeping the debug info file available for troubleshooting

. "$(dirname "$0")"/functions
. detect-environment
. compile-options

# Only produce debug symbols for RELEASE builds
if [ "$BUILD_TYPE" != "RELEASE" ]; then
    log_debug "Debug symbols not requested"
    exit 0
else
    log_debug "Producing debug symbols"
fi

# Locate binaries and libraries to extract debug symbols from
EXECUTABLES_DIR="$BASEDIR/cfengine/dist$PREFIX/bin"
EXECUTABLES_LIST=$(ls "$EXECUTABLES_DIR"/cf-*)
LIBRARIES_DIR="$BASEDIR/cfengine/dist$PREFIX/lib"
LIBRARIES_LIST=$(ls "$LIBRARIES_DIR"/*.so*)

# Configure output directories and naming
DEBUG_SUFFIX=debug
PAYLOAD_DIR=payload
EXECUTABLES_PAYLOAD_DIR=$PAYLOAD_DIR/exe
LIBRARIES_PAYLOAD_DIR=$PAYLOAD_DIR/lib

# Print build information
log_debug "EXECUTABLES_DIR  = $EXECUTABLES_DIR"
log_debug "EXECUTABLES_LIST = $EXECUTABLES_LIST"
log_debug "LIBRARIES_DIR    = $LIBRARIES_DIR"
log_debug "LIBRARIES_LIST   = $LIBRARIES_LIST"
log_debug "DEBUG_SUFFIX     = $DEBUG_SUFFIX"
log_debug "PAYLOAD_DIR      = $PAYLOAD_DIR"

# Create temporary directories to store the extracted debug symbols
mkdir $PAYLOAD_DIR
mkdir $EXECUTABLES_PAYLOAD_DIR
mkdir $LIBRARIES_PAYLOAD_DIR

# Process executables: extract debug symbols, strip binaries, and add debug links
# Debug symbols will be installed in the same directory as executables for easier debugging
for i in $EXECUTABLES_LIST; do
    log_debug "Taking debug symbols from: $i and putting it into: $i.$DEBUG_SUFFIX"
    # Extract debug information into a separate file
    objcopy --only-keep-debug "$i" "$i.$DEBUG_SUFFIX"
    # Remove debug symbols from the binary to reduce size
    strip --strip-debug --strip-unneeded "$i"
    # Add a reference in the binary to the debug file
    objcopy --add-gnu-debuglink="$i.$DEBUG_SUFFIX" "$i"
    # Make debug file non-executable
    chmod -x "$i.$DEBUG_SUFFIX"
    # Compress and move to payload directory
    gzip "$i.$DEBUG_SUFFIX"
    mv "$i.$DEBUG_SUFFIX.gz" $EXECUTABLES_PAYLOAD_DIR
done

# Process libraries: same procedure as executables
# Debug symbols will be installed in the same directory as libraries
for i in $LIBRARIES_LIST; do
    log_debug "Taking debug symbols from: $i and putting it into: $i.$DEBUG_SUFFIX"
    objcopy --only-keep-debug "$i" "$i.$DEBUG_SUFFIX"
    strip --strip-debug --strip-unneeded "$i"
    objcopy --add-gnu-debuglink="$i.$DEBUG_SUFFIX" "$i"
    chmod -x "$i.$DEBUG_SUFFIX"
    gzip "$i.$DEBUG_SUFFIX"
    mv "$i.$DEBUG_SUFFIX.gz" $LIBRARIES_PAYLOAD_DIR
done

# Generate installation script that will be embedded in the self-extracting package
# This script decompresses and installs the debug symbol files
log_debug "Writing the installation script"
cat <<EOF >>$PAYLOAD_DIR/install-ds.sh
#!/bin/sh
# Install debug symbols for executables
for i in \`ls exe/*.gz\`; do
  gunzip \$i
done
mv exe/*.$DEBUG_SUFFIX $PREFIX/bin
# Install debug symbols for libraries
for i in \`ls lib/*.gz\`; do
  gunzip \$i
done
mv lib/*.$DEBUG_SUFFIX $PREFIX/lib
exit 0
EOF

# Generate the self-extracting wrapper script
# This creates a .bsx file that contains both a shell script and a tar archive
# When executed, it extracts itself to a temp directory and runs the installer
log_debug "Writing the decompression script"
cat <<EOF >>decompress-ds.sh
#!/bin/sh
echo "Installing debug symbols"
TMPDIR=\`mktemp -d /tmp/ds.XXXXXX\`; export TMPDIR
ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`
tail -n+\$ARCHIVE \$0 | tar xzv -C \$TMPDIR
echo "Installer ready - starting installation"
CDIR=\`pwd\`
cd \$TMPDIR/$PAYLOAD_DIR
chmod 755 install-ds.sh
chmod 755 uninstall-ds.sh
./install-ds.sh
cd \$CDIR
#echo "rm -rf \$TMPDIR"  >> decompress-ds.sh
exit 0
__ARCHIVE_BELOW__
EOF

# Generate uninstallation script for removing debug symbols
log_debug "Writing the uninstall script"
cat <<EOF >>$PAYLOAD_DIR/uninstall-ds.sh
#!/bin/sh
echo "Uninstalling debug symbols"
rm -f "$PREFIX"/bin/*.\$DEBUG_SUFFIX
rm -f "$PREFIX"/lib/*.\$DEBUG_SUFFIX
echo "Done"
EOF

# Create the self-extracting package by combining the wrapper script and payload
# The resulting .bsx file is a shell script with an embedded tar.gz archive
log_debug "Creating the self extracting script"
tar cf payload.tar $PAYLOAD_DIR
if [ -e "payload.tar" ]; then
    gzip payload.tar
    if [ -e "payload.tar.gz" ]; then
        # Concatenate the shell script and the compressed archive
        cat decompress-ds.sh payload.tar.gz >cfengine-ds-"$OS"-"$OS_VERSION"-"$ARCH".bsx
    else
        log_error "File not found"
        exit 1
    fi
    log_debug "cfengine-ds-$OS-$OS_VERSION-$ARCH.bsx created"
fi

# Move the package to the output directory
mkdir -p output/debug_symbols
mv -- *.bsx output/debug_symbols

# Clean up temporary files and directories
rm -f decompress-ds.sh
rm -f install-ds.sh
rm -f uninstall-ds.sh
rm -rf $PAYLOAD_DIR

log_debug "Debug symbols produced."

exit 0
